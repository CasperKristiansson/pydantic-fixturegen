from __future__ import annotations

from pathlib import Path

from typer.testing import CliRunner

from pydantic_fixturegen.cli import app as cli_app

runner = CliRunner()


def _write_module(tmp_path: Path, name: str = "models") -> Path:
    module_path = tmp_path / f"{name}.py"
    module_path.write_text(
        """
from pydantic import BaseModel, Field


class Address(BaseModel):
    city: str
    postcode: str = Field(min_length=3)


class User(BaseModel):
    name: str
    age: int
    address: Address


class Order(BaseModel):
    order_id: str
    total: float
""",
        encoding="utf-8",
    )
    return module_path


def test_gen_fixtures_basic_functions_style(tmp_path: Path) -> None:
    module_path = _write_module(tmp_path)
    output = tmp_path / "conftest.py"

    result = runner.invoke(
        cli_app,
        [
            "gen",
            "fixtures",
            str(module_path),
            "--out",
            str(output),
            "--include",
            "models.User",
        ],
    )

    assert result.exit_code == 0, f"stdout: {result.stdout}\nstderr: {result.stderr}"
    text = output.read_text(encoding="utf-8")
    assert "def user(" in text
    assert "Generated by pydantic-fixturegen" in text

    rerun = runner.invoke(
        cli_app,
        [
            "gen",
            "fixtures",
            str(module_path),
            "--out",
            str(output),
            "--include",
            "models.User",
        ],
    )
    assert rerun.exit_code == 0


def test_gen_fixtures_factory_dict(tmp_path: Path) -> None:
    module_path = _write_module(tmp_path)
    output = tmp_path / "factories.py"

    result = runner.invoke(
        cli_app,
        [
            "gen",
            "fixtures",
            str(module_path),
            "--out",
            str(output),
            "--include",
            "models.User",
            "--style",
            "factory",
            "--return-type",
            "dict",
            "--cases",
            "2",
        ],
    )

    assert result.exit_code == 0, f"stdout: {result.stdout}\nstderr: {result.stderr}"
    text = output.read_text(encoding="utf-8")
    assert "def user_factory(" in text
    assert "def builder(" in text
    assert "return dict(" in text


def test_gen_fixtures_class_style_scope(tmp_path: Path) -> None:
    module_path = _write_module(tmp_path)
    output = tmp_path / "class_style.py"

    result = runner.invoke(
        cli_app,
        [
            "gen",
            "fixtures",
            str(module_path),
            "--out",
            str(output),
            "--style",
            "class",
            "--scope",
            "module",
        ],
    )

    assert result.exit_code == 0, f"stdout: {result.stdout}\nstderr: {result.stderr}"
    text = output.read_text(encoding="utf-8")
    assert "class AddressFactory" in text
    assert "@pytest.fixture(scope=\"module\")" in text
